// Code generated by protoc-gen-go.
// source: network.proto
// DO NOT EDIT!

package ricochet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TorProcessStatus_Status int32

const (
	TorProcessStatus_DISABLED TorProcessStatus_Status = 0
	TorProcessStatus_STOPPED  TorProcessStatus_Status = 1
	TorProcessStatus_STARTING TorProcessStatus_Status = 2
	TorProcessStatus_RUNNING  TorProcessStatus_Status = 3
)

var TorProcessStatus_Status_name = map[int32]string{
	0: "DISABLED",
	1: "STOPPED",
	2: "STARTING",
	3: "RUNNING",
}
var TorProcessStatus_Status_value = map[string]int32{
	"DISABLED": 0,
	"STOPPED":  1,
	"STARTING": 2,
	"RUNNING":  3,
}

func (x TorProcessStatus_Status) String() string {
	return proto.EnumName(TorProcessStatus_Status_name, int32(x))
}
func (TorProcessStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type TorControlStatus_Status int32

const (
	TorControlStatus_STOPPED    TorControlStatus_Status = 0
	TorControlStatus_ERROR      TorControlStatus_Status = 1
	TorControlStatus_CONNECTING TorControlStatus_Status = 2
	TorControlStatus_CONNECTED  TorControlStatus_Status = 3
)

var TorControlStatus_Status_name = map[int32]string{
	0: "STOPPED",
	1: "ERROR",
	2: "CONNECTING",
	3: "CONNECTED",
}
var TorControlStatus_Status_value = map[string]int32{
	"STOPPED":    0,
	"ERROR":      1,
	"CONNECTING": 2,
	"CONNECTED":  3,
}

func (x TorControlStatus_Status) String() string {
	return proto.EnumName(TorControlStatus_Status_name, int32(x))
}
func (TorControlStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type TorConnectionStatus_Status int32

const (
	TorConnectionStatus_UNKNOWN       TorConnectionStatus_Status = 0
	TorConnectionStatus_OFFLINE       TorConnectionStatus_Status = 1
	TorConnectionStatus_BOOTSTRAPPING TorConnectionStatus_Status = 2
	TorConnectionStatus_READY         TorConnectionStatus_Status = 3
)

var TorConnectionStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OFFLINE",
	2: "BOOTSTRAPPING",
	3: "READY",
}
var TorConnectionStatus_Status_value = map[string]int32{
	"UNKNOWN":       0,
	"OFFLINE":       1,
	"BOOTSTRAPPING": 2,
	"READY":         3,
}

func (x TorConnectionStatus_Status) String() string {
	return proto.EnumName(TorConnectionStatus_Status_name, int32(x))
}
func (TorConnectionStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

type MonitorNetworkRequest struct {
}

func (m *MonitorNetworkRequest) Reset()                    { *m = MonitorNetworkRequest{} }
func (m *MonitorNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*MonitorNetworkRequest) ProtoMessage()               {}
func (*MonitorNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type TorProcessStatus struct {
	Status       TorProcessStatus_Status `protobuf:"varint,1,opt,name=status,enum=ricochet.TorProcessStatus_Status" json:"status,omitempty"`
	ErrorMessage string                  `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *TorProcessStatus) Reset()                    { *m = TorProcessStatus{} }
func (m *TorProcessStatus) String() string            { return proto.CompactTextString(m) }
func (*TorProcessStatus) ProtoMessage()               {}
func (*TorProcessStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type TorControlStatus struct {
	Status       TorControlStatus_Status `protobuf:"varint,1,opt,name=status,enum=ricochet.TorControlStatus_Status" json:"status,omitempty"`
	ErrorMessage string                  `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
	TorVersion   string                  `protobuf:"bytes,10,opt,name=torVersion" json:"torVersion,omitempty"`
}

func (m *TorControlStatus) Reset()                    { *m = TorControlStatus{} }
func (m *TorControlStatus) String() string            { return proto.CompactTextString(m) }
func (*TorControlStatus) ProtoMessage()               {}
func (*TorControlStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type TorConnectionStatus struct {
	Status            TorConnectionStatus_Status `protobuf:"varint,1,opt,name=status,enum=ricochet.TorConnectionStatus_Status" json:"status,omitempty"`
	BootstrapProgress string                     `protobuf:"bytes,10,opt,name=bootstrapProgress" json:"bootstrapProgress,omitempty"`
}

func (m *TorConnectionStatus) Reset()                    { *m = TorConnectionStatus{} }
func (m *TorConnectionStatus) String() string            { return proto.CompactTextString(m) }
func (*TorConnectionStatus) ProtoMessage()               {}
func (*TorConnectionStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type NetworkStatus struct {
	Process    *TorProcessStatus    `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	Control    *TorControlStatus    `protobuf:"bytes,2,opt,name=control" json:"control,omitempty"`
	Connection *TorConnectionStatus `protobuf:"bytes,3,opt,name=connection" json:"connection,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *NetworkStatus) GetProcess() *TorProcessStatus {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *NetworkStatus) GetControl() *TorControlStatus {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *NetworkStatus) GetConnection() *TorConnectionStatus {
	if m != nil {
		return m.Connection
	}
	return nil
}

type StartNetworkRequest struct {
}

func (m *StartNetworkRequest) Reset()                    { *m = StartNetworkRequest{} }
func (m *StartNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*StartNetworkRequest) ProtoMessage()               {}
func (*StartNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type StopNetworkRequest struct {
}

func (m *StopNetworkRequest) Reset()                    { *m = StopNetworkRequest{} }
func (m *StopNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*StopNetworkRequest) ProtoMessage()               {}
func (*StopNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func init() {
	proto.RegisterType((*MonitorNetworkRequest)(nil), "ricochet.MonitorNetworkRequest")
	proto.RegisterType((*TorProcessStatus)(nil), "ricochet.TorProcessStatus")
	proto.RegisterType((*TorControlStatus)(nil), "ricochet.TorControlStatus")
	proto.RegisterType((*TorConnectionStatus)(nil), "ricochet.TorConnectionStatus")
	proto.RegisterType((*NetworkStatus)(nil), "ricochet.NetworkStatus")
	proto.RegisterType((*StartNetworkRequest)(nil), "ricochet.StartNetworkRequest")
	proto.RegisterType((*StopNetworkRequest)(nil), "ricochet.StopNetworkRequest")
	proto.RegisterEnum("ricochet.TorProcessStatus_Status", TorProcessStatus_Status_name, TorProcessStatus_Status_value)
	proto.RegisterEnum("ricochet.TorControlStatus_Status", TorControlStatus_Status_name, TorControlStatus_Status_value)
	proto.RegisterEnum("ricochet.TorConnectionStatus_Status", TorConnectionStatus_Status_name, TorConnectionStatus_Status_value)
}

func init() { proto.RegisterFile("network.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0xaf, 0xd2, 0x40,
	0x10, 0xc7, 0x5f, 0x1f, 0x91, 0xf7, 0x18, 0x28, 0x81, 0x45, 0x62, 0x63, 0xa2, 0xd1, 0x8d, 0x07,
	0x0f, 0xa6, 0x07, 0xf4, 0x62, 0xe2, 0xaf, 0x02, 0xc5, 0x10, 0x61, 0xdb, 0x6c, 0x8b, 0xc6, 0x23,
	0x34, 0x1b, 0x24, 0x9a, 0x6e, 0xdd, 0x2e, 0xf1, 0xef, 0xf2, 0xea, 0xd5, 0xff, 0xc0, 0xbf, 0xc8,
	0x6d, 0x77, 0x21, 0x6d, 0x8d, 0xc6, 0xbc, 0x13, 0xcc, 0xcc, 0x77, 0xa6, 0xf3, 0x99, 0x99, 0x05,
	0x3b, 0x65, 0xf2, 0x1b, 0x17, 0x9f, 0xdd, 0x4c, 0x70, 0xc9, 0xd1, 0xb5, 0x38, 0x24, 0x3c, 0xf9,
	0xc4, 0x24, 0xbe, 0x03, 0xe3, 0x35, 0x4f, 0x0f, 0x92, 0x0b, 0xa2, 0x15, 0x94, 0x7d, 0x3d, 0xb2,
	0x5c, 0xe2, 0xef, 0x16, 0x0c, 0x62, 0x2e, 0x42, 0xc1, 0x13, 0x96, 0xe7, 0x91, 0xdc, 0xca, 0x63,
	0x8e, 0x9e, 0x43, 0x3b, 0x2f, 0xff, 0x39, 0xd6, 0x03, 0xeb, 0x71, 0x7f, 0xf2, 0xd0, 0x3d, 0x15,
	0x72, 0x9b, 0x5a, 0x57, 0xff, 0x50, 0x93, 0x80, 0x30, 0xf4, 0x98, 0x10, 0x5c, 0xac, 0x95, 0x62,
	0xbb, 0x67, 0xce, 0xa5, 0x2a, 0xd0, 0xa1, 0x35, 0x1f, 0x7e, 0x05, 0x6d, 0xf3, 0xa1, 0x1e, 0x5c,
	0xcf, 0x97, 0x91, 0x37, 0x5d, 0xf9, 0xf3, 0xc1, 0x05, 0xea, 0xc2, 0x55, 0x14, 0x07, 0x61, 0xa8,
	0x0c, 0xab, 0x08, 0x45, 0xb1, 0x47, 0xe3, 0x25, 0x79, 0x3b, 0xb8, 0x2c, 0x42, 0x74, 0x43, 0x48,
	0x61, 0xb4, 0xf0, 0x2f, 0xdd, 0xf3, 0x8c, 0xa7, 0x52, 0xf0, 0x2f, 0xff, 0xd5, 0x73, 0x4d, 0x7b,
	0x83, 0x9e, 0xd1, 0x7d, 0x00, 0x35, 0xbc, 0xf7, 0x4c, 0xe4, 0x07, 0x9e, 0x3a, 0x50, 0x2a, 0x2a,
	0x1e, 0xfc, 0xfa, 0xcc, 0x54, 0xa1, 0xb8, 0x40, 0x1d, 0xb8, 0xe5, 0x53, 0x1a, 0x50, 0x05, 0xd4,
	0x07, 0x98, 0x05, 0x84, 0xf8, 0x33, 0x83, 0x64, 0x43, 0xc7, 0xd8, 0x4a, 0xd9, 0xc2, 0x3f, 0x2d,
	0x18, 0xe9, 0x46, 0x53, 0x96, 0x48, 0x55, 0xd2, 0x94, 0x7b, 0xd1, 0xe0, 0x7a, 0xd4, 0xe4, 0xaa,
	0xc9, 0x9b, 0x68, 0x4f, 0x60, 0xb8, 0xe3, 0x5c, 0xe6, 0x52, 0x6c, 0x33, 0xb5, 0xb7, 0xbd, 0x50,
	0x38, 0xa6, 0xfb, 0x3f, 0x03, 0xf8, 0x4d, 0x15, 0x62, 0x43, 0xde, 0x91, 0xe0, 0x03, 0xd1, 0x7b,
	0x09, 0x16, 0x8b, 0xd5, 0x92, 0xf8, 0x0a, 0x63, 0x08, 0xf6, 0x34, 0x08, 0xe2, 0x28, 0xa6, 0x5e,
	0x18, 0x6a, 0x12, 0x05, 0x49, 0x7d, 0x6f, 0xfe, 0x51, 0x51, 0xfc, 0xb0, 0xc0, 0x36, 0x17, 0x66,
	0x2a, 0x3d, 0x83, 0xab, 0x4c, 0x1f, 0x4c, 0x09, 0xd0, 0x9d, 0xdc, 0xfd, 0xfb, 0x31, 0xd1, 0x93,
	0xb4, 0xc8, 0x4a, 0xf4, 0xca, 0xca, 0x6d, 0x34, 0xb3, 0x6a, 0xeb, 0xa4, 0x27, 0x29, 0x7a, 0x09,
	0x90, 0x9c, 0x07, 0xe2, 0xb4, 0xca, 0xc4, 0x7b, 0xff, 0x9c, 0x17, 0xad, 0x24, 0xe0, 0x31, 0x8c,
	0x94, 0x57, 0xc8, 0xc6, 0x13, 0xb9, 0x0d, 0x28, 0x92, 0x3c, 0xab, 0x7b, 0x77, 0xed, 0xf2, 0x89,
	0x3d, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xce, 0xd8, 0xfb, 0x73, 0x03, 0x00, 0x00,
}
